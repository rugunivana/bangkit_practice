{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "1. Tensorflow_and_Neural_Network.ipynb",
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/rugunivana/bangkit_practice/blob/main/1.%20Intro%20to%20TensorFlow%20for%20AI%3A%20NN%2C%20Computer%20Vision%2C%20CNN%2C%20Using%20Real%20World%20Image.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gjfeRbyAfQAm"
      },
      "source": [
        "# **Week 1: Your First Neural Network**\n",
        "Using Neural Network to solve line equation"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "59TgIqm43dbb"
      },
      "source": [
        "## Imports"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "z4YmDgi4he_K"
      },
      "source": [
        "\n",
        "*   Tensorflow -> We will calling it as tf for ease of use\n",
        "*   Numpy -> represent our data as lists easily and quickly\n",
        "*   Keras -> Framework for defining a neural network as a set of Sequential layers\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "KDd-wIJrZD9B"
      },
      "source": [
        "!pip install tensorflow==2.0.0-alpha0 "
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "npAnPwz7giaE"
      },
      "source": [
        "pip install keras"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "b6iz5suxgQhN"
      },
      "source": [
        "import tensorflow as tf\n",
        "import numpy as np\n",
        "from tensorflow import keras"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5-cTwQYr3qkZ"
      },
      "source": [
        "## Define and Compile the Neural Network"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wJKzqgnOcoZf"
      },
      "source": [
        "\n",
        "Next we will create the simplest possible neural network. It has 1 layer and that layer has 1 neuran, and the input shape to it is just 1 value. \n",
        "\n",
        "* LOSS function = measures the guessed answers against the known correct answers and measures how well or how badly it did\n",
        "* OPTIMIZER function = make another guess. Try to minimize the loss. It will come up with another function. Which is closer to the correct result (the loss is lower). \n",
        "* EPOCH = repetition \n",
        "\n",
        "Below we use 'STOCHASTIC GRADIENT DESCENT' as optmizer and 'MSE' as loss function. In the future, we weill use different and appropriate loss and optimizer for different scenarios. "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "jenciqehfNg9"
      },
      "source": [
        "model = tf.keras.Sequential([keras.layers.Dense(units=1, input_shape=[1])])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "m8YQN1H41L-Y"
      },
      "source": [
        "model.compile(optimizer='sgd', loss='mean_squared_error')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4Dxk4q-jzEy4"
      },
      "source": [
        "xs = np.array([-1.0,  0.0, 1.0, 2.0, 3.0, 4.0], dtype=float)\n",
        "ys = np.array([-3.0, -1.0, 1.0, 3.0, 5.0, 7.0], dtype=float)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "cuyM-TMpbtKJ"
      },
      "source": [
        "model.fit(xs, ys, epochs=500) #when we start, the loss is quite highb(the guess wasn't that great), but epoch by epoch the loss are getting lower. So the neural network are getting closer to spotting the relationship. "
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "kQFAr_xo0M4T",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "52436107-5336-43d8-b392-3e6c78ac0459"
      },
      "source": [
        "print(model.predict([10.0]))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[17.009712]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nv3gQWLR326t"
      },
      "source": [
        "## Exercise 1: House Prices"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "M4tFtyisfhis"
      },
      "source": [
        "In this exercise you'll try to build a neural network that predicts the price of a house according to a simple formula.\n",
        "\n",
        "So, imagine if house pricing was as easy as a house costs 50k + 50k per bedroom, so that a 1 bedroom house costs 100k, a 2 bedroom house costs 150k etc.\n",
        "\n",
        "How would you create a neural network that learns this relationship so that it would predict a 7 bedroom house as costing close to 400k etc.\n",
        "\n",
        "Hint: **Your network might work better if you scale the house price down.** You \n",
        "don't have to give the answer 400...it might be better to create something that predicts the number 4, and then your answer is in the 'hundreds of thousands' etc.\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "tyWa14Amf2zm"
      },
      "source": [
        "# GRADED FUNCTION: house_model\n",
        "# remove indention error please\n",
        "def house_model(y_new):\n",
        "    xs = np.array([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 8.0, 9.0, 10.0,         11.0, 12.0, 13.0], dtype=float)\n",
        "    ys = np.array([100.0, 150.0, 200.0, 250.0, 300.0, 350.0, 450.0, 500.0, 550.0,600.0, 650.0,700.0], dtype=float)\n",
        "   \n",
        "    model = tf.keras.Sequential([keras.layers.Dense(units=1,   input_shape=[1])])\n",
        "    model.compile(optimizer='sgd',loss='mean_squared_error')\n",
        "    model.fit(xs,ys,epochs=4000)\n",
        "    return (model.predict(y_new)[0]+1) //100\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dft0eIP602-i"
      },
      "source": [
        "# outside function\n",
        "prediction = house_model([7.0])\n",
        "print(prediction)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Bnvnqtzh0c8j"
      },
      "source": [
        "model.compile(optimizer='sgd', loss='mean_squared_error')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "heTdQe98391r"
      },
      "source": [
        "# **Additional References and Guides**\n",
        "\n",
        "* Nice courses: [click here](https://www.deeplearning.ai/program/ai-for-everyone/)\n",
        "* More about Tensorflow: [link text](https://www.tensorflow.org/)\n",
        "* Youtube about Tensorflow: [link text](https://www.youtube.com/c/TensorFlow/videos)\n",
        "* Neural Network Illustration: [link text](http://playground.tensorflow.org/#activation=tanh&batchSize=10&dataset=circle&regDataset=reg-plane&learningRate=0.03&regularizationRate=0&noise=0&networkShape=4,2&seed=0.76230&showTestData=false&discretize=false&percTrainData=50&x=true&y=true&xTimesY=false&xSquared=false&ySquared=false&cosX=false&sinX=false&cosY=false&sinY=false&collectStats=false&problem=classification&initZero=false&hideText=false)\n",
        "* GitHub \"The Hello World of Deep Learning with Neural Networks\" [link text](https://github.com/lmoroney/dlaicourse/blob/master/Course%201%20-%20Part%202%20-%20Lesson%202%20-%20Notebook.ipynb)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "NoQJQcez5SDw"
      },
      "source": [
        "#**Week 2: Introduction to Computer Vision** "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_xSGlJtp5VX1"
      },
      "source": [
        "Machine learning paradigm: The main three paradigms in machine learning including supervised learning, unsupervised learning and reinforcement learning. [Full Article](https://stratusinnovations.com/blog/machine-learning-paradigms-supervised-unsupervised/#:~:text=Machine%20Learning%20Paradigms%3A%20Supervised%2C%20Unsupervised%2C%20and%20Reinforcement%20Learning,-Machine%20learning%20can&text=The%20three%20main%20paradigms%20in,unsupervised%20learning%2C%20and%20reinforcement%20learning.)\n",
        "* **Supervised Learning**: Data set contains both input and output values\n",
        "* **Unsupervised Learning**: Outputs do not exist within the example data\n",
        "* **Reinforcement Learning**: We don't have an example set to begin with (nor input or output data). Our learning algorithm must construct based on some set of rules. \n"
      ]
    }
  ]
}
